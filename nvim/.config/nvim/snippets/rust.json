{"panic":{"body":["panic!(\"${1:\\{${2::?}\\}}\");"],"prefix":"panic","description":"panic!(…);"},"cfg":{"body":["#[cfg(${1})]"],"prefix":"cfg","description":"#[cfg(…)]"},"println_debug":{"body":["println!(\"{:?}\", ${1:});"],"prefix":"pd","description":"println for debugging"},"New":{"body":["fn new() -> Self {","    ${1:todo!()}","}"],"prefix":"new","description":"the new() func in struct"},"bench":{"body":["#[bench]","fn ${1:name}(b: &mut test::Bencher) {","    ${2:b.iter(|| ${3:\/* benchmark code *\/})}","}"],"prefix":"bench","description":"#[bench]"},"file":{"body":["file!()"],"prefix":"file","description":"file!()"},"derive":{"body":["#[derive(${1})]"],"prefix":"derive","description":"#[derive(…)]"},"include_str":{"body":["include_str!(\"${1}\")"],"prefix":"include_str","description":"include_str!(\"…\")"},"derive_debug":{"body":"#[derive(Debug)]","prefix":"#derive_debug","description":"#[derive(Debug)]"},"option_env":{"body":["option_env!(\"${1}\")"],"prefix":"option_env","description":"option_env!(\"…\")"},"Some":{"body":["Some(${1})"],"prefix":"Some","description":"Some(…)"},"Ok":{"body":["Ok(${1:result})"],"prefix":"Ok","description":"Ok(…)"},"Err":{"body":["Err(${1})"],"prefix":"Err","description":"Err(…)"},"extern-crate":{"body":["extern crate ${1:name};"],"prefix":"extern-crate","description":"extern crate …;"},"extern-fn":{"body":["extern \"C\" fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {","    ${5:\/\/ add code here}","}"],"prefix":"extern-fn","description":"extern \"C\" fn …(…) { … }"},"extern-mod":{"body":["extern \"C\" {","    ${2:\/\/ add code here}","}"],"prefix":"extern-mod","description":"extern \"C\" { … }"},"unimplemented":{"body":["unimplemented!()"],"prefix":"unimplemented","description":"unimplemented!()"},"module_path":{"body":["module_path!()"],"prefix":"module_path","description":"module_path!()"},"closure":{"body":["|${1}| {${2}}"],"prefix":"closure","description":"closure"},"allow":{"body":["#[allow(${1})]"],"prefix":"allow","description":"#[allow(…)]"},"mod":{"body":["mod ${1:name};"],"prefix":"mod","description":"mod …;"},"allow_dead_code":{"body":["#[allow(dead_code)]"],"prefix":"allow_dead_code","description":"#[allow(dead_code)]"},"stringify":{"body":["stringify!(${1})"],"prefix":"stringify","description":"stringify!(…)"},"mod-block":{"body":["mod ${1:name} {","    ${2:\/\/ add code here}","}"],"prefix":"mod-block","description":"mod … { … }"},"enum":{"body":["#[derive(Debug)]","enum ${1:Name} {","    ${2:Variant1},","    ${3:Variant2},","}"],"prefix":"enum","description":"enum … { … }"},"struct-tuple":{"body":["struct ${1:Name}(${2:Type});"],"prefix":"struct-tuple","description":"struct …(…);"},"no_core":{"body":["#[no_core]"],"prefix":"no_core","description":"#[no_core]"},"assert":{"body":["assert!(${1});"],"prefix":"assert","description":"assert!(…);"},"macro_use":{"body":["#[macro_use(${1})]"],"prefix":"macro_use","description":"#[macro_use(…)]"},"while-let":{"body":["while let ${1:Some(pat)} = ${2:expr} {","    ${2:unimplemented!();}","}"],"prefix":"while-let","description":"while let … = … { … }"},"assert_eq":{"body":["assert_eq!(${1}, ${2});"],"prefix":"assert_eq","description":"assert_eq!(…, …);"},"cfg_attr":{"body":["#[cfg_attr(${1}, ${2})]"],"prefix":"cfg_attr","description":"#[cfg_attr(…, …)]"},"cfg!":{"body":["cfg!(${1})"],"prefix":"cfg!","description":"cfg!(…)"},"env":{"body":["env!(\"${1}\")"],"prefix":"env","description":"env!(\"…\")"},"concat_idents":{"body":["concat_idents!(${1})"],"prefix":"concat_idents","description":"concat_idents!(…)"},"warn":{"body":["#[warn(${1})]"],"prefix":"warn","description":"#[warn(…)]"},"debug_assert_eq":{"body":["debug_assert_eq!(${1}, ${2});"],"prefix":"debug_assert_eq","description":"debug_assert_eq!(…, …)"},"try":{"body":["try!(${1})"],"prefix":"try","description":"try!(…)"},"Debug":{"body":["dbg!($1);"],"prefix":"dbg","description":"Debug macro"},"fn":{"body":["fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {","    ${5:unimplemented!();}","}"],"prefix":"fn","description":"fn …(…) { … }"},"#de_all":{"body":"#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]","prefix":"#derive_all"},"format_args":{"body":["format_args!(\"${1:\\{${2::?}\\}}\")"],"prefix":"format_args","description":"format_args!(…)"},"include":{"body":["include!(\"${1}\");"],"prefix":"include","description":"include!(\"…\");"},"include_bytes":{"body":["include_bytes!(\"${1}\")"],"prefix":"include_bytes","description":"include_bytes!(\"…\")"},"println":{"body":["println!(\"${1:{${2::?}\\}}\"${3:});"],"prefix":"pl","description":"println!(…);"},"concat":{"body":["concat!(${1})"],"prefix":"concat","description":"concat!(…)"},"writeln":{"body":["writeln!(${1}, \"${2:\\{${3::?}\\}}\")"],"prefix":"writeln","description":"writeln!(…, …)"},"else":{"body":["else {","    ${1:unimplemented!();}","}"],"prefix":"else","description":"else { … }"},"struct-unit":{"body":["struct ${1:Name};"],"prefix":"struct-unit","description":"struct …;"},"impl-trait":{"body":["impl ${1:Trait} for ${2:Type} {","    ${3:\/\/ add code here}","}"],"prefix":"impl-trait","description":"impl … for … { … }"},"feature":{"body":["#[feature(${1})]"],"prefix":"feature","description":"#[feature(…)]"},"thread_local":{"body":["thread_local!(static ${1:STATIC}: ${2:Type} = ${4:init});"],"prefix":"thread_local","description":"thread_local!(static …: … = …);"},"deny":{"body":["#deny(${1})]"],"prefix":"deny","description":"#[deny(…)]"},"debug_assert":{"body":["debug_assert!(${1});"],"prefix":"debug_assert","description":"debug_assert!(…)"},"format":{"body":["format!(\"${1:\\{${2::?}\\}}\")"],"prefix":"format","description":"format!(…)"},"line":{"body":["line!()"],"prefix":"line","description":"line!()"},"if-let":{"body":["if let ${1:Some(pat)} = ${2:expr} {","    ${2:unimplemented!();}","}"],"prefix":"if-let","description":"if let … = … { … }"},"unreachable":{"body":["unreachable!(${1})"],"prefix":"unreachable","description":"unreachable!(…)"},"print":{"body":["print!(\"${1:{${2::?}\\}}\"${3:});"],"prefix":"pt","description":"print!(…);"},"no_std":{"body":["#[no_std]"],"prefix":"no_std","description":"#[no_std]"},"vec":{"body":["vec![${1}]"],"prefix":"vec","description":"vec![…]"},"write":{"body":["write!(${1}, \"${2:\\{${3::?}\\}}\")"],"prefix":"write","description":"write!(…)"},"test":{"body":["#[test]","fn ${1:name}() {","    ${2:unimplemented!();}","}"],"prefix":"test","description":"#[test]"},"for":{"body":["for ${1:pat} in ${2:expr} {","    ${3:unimplemented!();}","}"],"prefix":"for","description":"for … in … { … }"},"repr":{"body":["#[repr(${1})]"],"prefix":"repr","description":"#[repr(…)]"},"column":{"body":["column!()"],"prefix":"column","description":"column!()"},"const":{"body":["const ${1:CONST}: ${2:Type} = ${4:init};"],"prefix":"const","description":"const …: … = …;"}}